# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from opentelemetry.proto.trace.v1 import trace_pb2 as opentelemetry_dot_proto_dot_trace_dot_v1_dot_trace__pb2
from sampler.v1 import sampler_pb2 as sampler_dot_v1_dot_sampler__pb2


class TraceSamplerStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.SampleTraces = channel.unary_stream(
                '/scale.sampler.TraceSampler/SampleTraces',
                request_serializer=sampler_dot_v1_dot_sampler__pb2.SampleTracesRequest.SerializeToString,
                response_deserializer=sampler_dot_v1_dot_sampler__pb2.SampleTracesResponse.FromString,
                )
        self.SampleTracesData = channel.unary_stream(
                '/scale.sampler.TraceSampler/SampleTracesData',
                request_serializer=sampler_dot_v1_dot_sampler__pb2.SampleTracesDataRequest.SerializeToString,
                response_deserializer=opentelemetry_dot_proto_dot_trace_dot_v1_dot_trace__pb2.TracesData.FromString,
                )


class TraceSamplerServicer(object):
    """Missing associated documentation comment in .proto file."""

    def SampleTraces(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SampleTracesData(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_TraceSamplerServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'SampleTraces': grpc.unary_stream_rpc_method_handler(
                    servicer.SampleTraces,
                    request_deserializer=sampler_dot_v1_dot_sampler__pb2.SampleTracesRequest.FromString,
                    response_serializer=sampler_dot_v1_dot_sampler__pb2.SampleTracesResponse.SerializeToString,
            ),
            'SampleTracesData': grpc.unary_stream_rpc_method_handler(
                    servicer.SampleTracesData,
                    request_deserializer=sampler_dot_v1_dot_sampler__pb2.SampleTracesDataRequest.FromString,
                    response_serializer=opentelemetry_dot_proto_dot_trace_dot_v1_dot_trace__pb2.TracesData.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'scale.sampler.TraceSampler', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class TraceSampler(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def SampleTraces(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/scale.sampler.TraceSampler/SampleTraces',
            sampler_dot_v1_dot_sampler__pb2.SampleTracesRequest.SerializeToString,
            sampler_dot_v1_dot_sampler__pb2.SampleTracesResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SampleTracesData(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/scale.sampler.TraceSampler/SampleTracesData',
            sampler_dot_v1_dot_sampler__pb2.SampleTracesDataRequest.SerializeToString,
            opentelemetry_dot_proto_dot_trace_dot_v1_dot_trace__pb2.TracesData.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
