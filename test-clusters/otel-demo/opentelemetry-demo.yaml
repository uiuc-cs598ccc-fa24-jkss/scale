---
# Source: opentelemetry-demo/charts/opensearch/templates/poddisruptionbudget.yaml
apiVersion: policy/v1beta1
kind: PodDisruptionBudget
metadata:
  name: "otel-demo-opensearch-pdb"
  labels:
    helm.sh/chart: opensearch-2.21.0
    app.kubernetes.io/name: opensearch
    app.kubernetes.io/instance: scale-otel-demo
    app.kubernetes.io/version: "2.15.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: otel-demo-opensearch
spec:
  maxUnavailable: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: opensearch
      app.kubernetes.io/instance: scale-otel-demo
---
# Source: opentelemetry-demo/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: scale-otel-demo
  labels:
    helm.sh/chart: opentelemetry-demo-0.32.8
    
    opentelemetry.io/name: scale-otel-demo
    app.kubernetes.io/instance: scale-otel-demo
    app.kubernetes.io/name: scale-otel-demo
    app.kubernetes.io/version: "1.11.1"
    app.kubernetes.io/part-of: opentelemetry-demo
    app.kubernetes.io/managed-by: Helm
---
# Source: opentelemetry-demo/charts/opensearch/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: otel-demo-opensearch-config
  labels:
    helm.sh/chart: opensearch-2.21.0
    app.kubernetes.io/name: opensearch
    app.kubernetes.io/instance: scale-otel-demo
    app.kubernetes.io/version: "2.15.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: otel-demo-opensearch
data:
  opensearch.yml: |
    cluster.name: opensearch-cluster
    
    # Bind to all interfaces because we don't know what IP address Docker will assign to us.
    network.host: 0.0.0.0
    
    # Setting network.host to a non-loopback address enables the annoying bootstrap checks. "Single-node" mode disables them again.
    # Implicitly done if ".singleNode" is set to "true".
    # discovery.type: single-node
    
    # Start OpenSearch Security Demo Configuration
    # WARNING: revise all the lines below before you go into production
    plugins:
      security:
        ssl:
          transport:
            pemcert_filepath: esnode.pem
            pemkey_filepath: esnode-key.pem
            pemtrustedcas_filepath: root-ca.pem
            enforce_hostname_verification: false
          http:
            enabled: true
            pemcert_filepath: esnode.pem
            pemkey_filepath: esnode-key.pem
            pemtrustedcas_filepath: root-ca.pem
        allow_unsafe_democertificates: true
        allow_default_init_securityindex: true
        authcz:
          admin_dn:
            - CN=kirk,OU=client,O=client,L=test,C=de
        audit.type: internal_opensearch
        enable_snapshot_restore_privilege: true
        check_snapshot_restore_write_privileges: true
        restapi:
          roles_enabled: ["all_access", "security_rest_api_access"]
        system_indices:
          enabled: true
          indices:
            [
              ".opendistro-alerting-config",
              ".opendistro-alerting-alert*",
              ".opendistro-anomaly-results*",
              ".opendistro-anomaly-detector*",
              ".opendistro-anomaly-checkpoints",
              ".opendistro-anomaly-detection-state",
              ".opendistro-reports-*",
              ".opendistro-notifications-*",
              ".opendistro-notebooks",
              ".opendistro-asynchronous-search-response*",
            ]
    ######## End OpenSearch Security Demo Configuration ########
---
---
# Source: opentelemetry-demo/templates/flagd-config.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: scale-otel-demo-flagd-config
  labels:
    helm.sh/chart: opentelemetry-demo-0.32.8
    
    opentelemetry.io/name: scale-otel-demo
    app.kubernetes.io/instance: scale-otel-demo
    app.kubernetes.io/name: scale-otel-demo
    app.kubernetes.io/version: "1.11.1"
    app.kubernetes.io/part-of: opentelemetry-demo
    app.kubernetes.io/managed-by: Helm
data:
  
  demo.flagd.json: |
    {
      "$schema": "https://flagd.dev/schema/v0/flags.json",
      "flags": {
        "productCatalogFailure": {
          "description": "Fail product catalog service on a specific product",
          "state": "ENABLED",
          "variants": {
            "on": true,
            "off": false
          },
          "defaultVariant": "off"
        },
        "recommendationServiceCacheFailure": {
          "description": "Fail recommendation service cache",
          "state": "ENABLED",
          "variants": {
            "on": true,
            "off": false
          },
          "defaultVariant": "off"
        },
        "adServiceManualGc": {
          "description": "Triggers full manual garbage collections in the ad service",
          "state": "ENABLED",
          "variants": {
            "on": true,
            "off": false
          },
          "defaultVariant": "off"
        },
        "adServiceHighCpu": {
          "description": "Triggers high cpu load in the ad service",
          "state": "ENABLED",
          "variants": {
            "on": true,
            "off": false
          },
          "defaultVariant": "off"
        },
        "adServiceFailure": {
          "description": "Fail ad service",
          "state": "ENABLED",
          "variants": {
            "on": true,
            "off": false
          },
          "defaultVariant": "off"
        },
        "kafkaQueueProblems": {
          "description": "Overloads Kafka queue while simultaneously introducing a consumer side delay leading to a lag spike",
          "state": "ENABLED",
          "variants": {
            "on": 100,
            "off": 0
          },
          "defaultVariant": "off"
        },
        "cartServiceFailure": {
          "description": "Fail cart service",
          "state": "ENABLED",
          "variants": {
            "on": true,
            "off": false
          },
          "defaultVariant": "off"
        },
        "paymentServiceFailure": {
          "description": "Fail payment service charge requests",
          "state": "ENABLED",
          "variants": {
            "on": true,
            "off": false
          },
          "defaultVariant": "off"
        },
        "paymentServiceUnreachable": {
          "description": "Payment service is unavailable",
          "state": "ENABLED",
          "variants": {
            "on": true,
            "off": false
          },
          "defaultVariant": "off"
        },
        "loadgeneratorFloodHomepage": {
          "description": "Flood the frontend with a large amount of requests.",
          "state": "ENABLED",
          "variants": {
            "on": 100,
            "off": 0
          },
          "defaultVariant": "off"
        },
        "imageSlowLoad": {
          "description": "slow loading images in the frontend",
          "state": "ENABLED",
          "variants": {
            "10sec": 10000,
            "5sec": 5000,
            "off": 0
          },
          "defaultVariant": "off"
        }
      }
    }
---

# Source: opentelemetry-demo/charts/opensearch/templates/service.yaml
kind: Service
apiVersion: v1
metadata:
  name: otel-demo-opensearch
  labels:
    helm.sh/chart: opensearch-2.21.0
    app.kubernetes.io/name: opensearch
    app.kubernetes.io/instance: scale-otel-demo
    app.kubernetes.io/version: "2.15.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: otel-demo-opensearch
  annotations:
    {}
spec:
  type: ClusterIP
  selector:
    app.kubernetes.io/name: opensearch
    app.kubernetes.io/instance: scale-otel-demo
  ports:
  - name: http
    protocol: TCP
    port: 9200
  - name: transport
    protocol: TCP
    port: 9300
---
# Source: opentelemetry-demo/charts/opensearch/templates/service.yaml
kind: Service
apiVersion: v1
metadata:
  name: otel-demo-opensearch-headless
  labels:
    helm.sh/chart: opensearch-2.21.0
    app.kubernetes.io/name: opensearch
    app.kubernetes.io/instance: scale-otel-demo
    app.kubernetes.io/version: "2.15.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: otel-demo-opensearch
  annotations:
    service.alpha.kubernetes.io/tolerate-unready-endpoints: "true"
spec:
  clusterIP: None # This is needed for statefulset hostnames like opensearch-0 to resolve
  # Create endpoints also if the related pod isn't ready
  publishNotReadyAddresses: true
  selector:
    app.kubernetes.io/name: opensearch
    app.kubernetes.io/instance: scale-otel-demo
  ports:
  - name: http
    port: 9200
  - name: transport
    port: 9300
  - name: metrics
    port: 9600
---
# Source: opentelemetry-demo/templates/component.yaml
apiVersion: v1
kind: Service
metadata:
  name: scale-otel-demo-adservice
  labels:
    helm.sh/chart: opentelemetry-demo-0.32.8
    
    opentelemetry.io/name: scale-otel-demo-adservice
    app.kubernetes.io/instance: scale-otel-demo
    app.kubernetes.io/component: adservice
    app.kubernetes.io/name: scale-otel-demo-adservice
    app.kubernetes.io/version: "1.11.1"
    app.kubernetes.io/part-of: opentelemetry-demo
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - port: 8080
      name: tcp-service
      targetPort: 8080
  selector:
    
    opentelemetry.io/name: scale-otel-demo-adservice
---
# Source: opentelemetry-demo/templates/component.yaml
apiVersion: v1
kind: Service
metadata:
  name: scale-otel-demo-cartservice
  labels:
    helm.sh/chart: opentelemetry-demo-0.32.8
    
    opentelemetry.io/name: scale-otel-demo-cartservice
    app.kubernetes.io/instance: scale-otel-demo
    app.kubernetes.io/component: cartservice
    app.kubernetes.io/name: scale-otel-demo-cartservice
    app.kubernetes.io/version: "1.11.1"
    app.kubernetes.io/part-of: opentelemetry-demo
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - port: 8080
      name: tcp-service
      targetPort: 8080
  selector:
    
    opentelemetry.io/name: scale-otel-demo-cartservice
---
# Source: opentelemetry-demo/templates/component.yaml
apiVersion: v1
kind: Service
metadata:
  name: scale-otel-demo-checkoutservice
  labels:
    helm.sh/chart: opentelemetry-demo-0.32.8
    
    opentelemetry.io/name: scale-otel-demo-checkoutservice
    app.kubernetes.io/instance: scale-otel-demo
    app.kubernetes.io/component: checkoutservice
    app.kubernetes.io/name: scale-otel-demo-checkoutservice
    app.kubernetes.io/version: "1.11.1"
    app.kubernetes.io/part-of: opentelemetry-demo
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - port: 8080
      name: tcp-service
      targetPort: 8080
  selector:
    
    opentelemetry.io/name: scale-otel-demo-checkoutservice
---
# Source: opentelemetry-demo/templates/component.yaml
apiVersion: v1
kind: Service
metadata:
  name: scale-otel-demo-currencyservice
  labels:
    helm.sh/chart: opentelemetry-demo-0.32.8
    
    opentelemetry.io/name: scale-otel-demo-currencyservice
    app.kubernetes.io/instance: scale-otel-demo
    app.kubernetes.io/component: currencyservice
    app.kubernetes.io/name: scale-otel-demo-currencyservice
    app.kubernetes.io/version: "1.11.1"
    app.kubernetes.io/part-of: opentelemetry-demo
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - port: 8080
      name: tcp-service
      targetPort: 8080
  selector:
    
    opentelemetry.io/name: scale-otel-demo-currencyservice
---
# Source: opentelemetry-demo/templates/component.yaml
apiVersion: v1
kind: Service
metadata:
  name: scale-otel-demo-emailservice
  labels:
    helm.sh/chart: opentelemetry-demo-0.32.8
    
    opentelemetry.io/name: scale-otel-demo-emailservice
    app.kubernetes.io/instance: scale-otel-demo
    app.kubernetes.io/component: emailservice
    app.kubernetes.io/name: scale-otel-demo-emailservice
    app.kubernetes.io/version: "1.11.1"
    app.kubernetes.io/part-of: opentelemetry-demo
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - port: 8080
      name: tcp-service
      targetPort: 8080
  selector:
    
    opentelemetry.io/name: scale-otel-demo-emailservice
---
# Source: opentelemetry-demo/templates/component.yaml
apiVersion: v1
kind: Service
metadata:
  name: scale-otel-demo-flagd
  labels:
    helm.sh/chart: opentelemetry-demo-0.32.8
    
    opentelemetry.io/name: scale-otel-demo-flagd
    app.kubernetes.io/instance: scale-otel-demo
    app.kubernetes.io/component: flagd
    app.kubernetes.io/name: scale-otel-demo-flagd
    app.kubernetes.io/version: "1.11.1"
    app.kubernetes.io/part-of: opentelemetry-demo
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - port: 8013
      name: tcp-service
      targetPort: 8013
  selector:
    
    opentelemetry.io/name: scale-otel-demo-flagd
---
# Source: opentelemetry-demo/templates/component.yaml
apiVersion: v1
kind: Service
metadata:
  name: scale-otel-demo-frontend
  labels:
    helm.sh/chart: opentelemetry-demo-0.32.8
    
    opentelemetry.io/name: scale-otel-demo-frontend
    app.kubernetes.io/instance: scale-otel-demo
    app.kubernetes.io/component: frontend
    app.kubernetes.io/name: scale-otel-demo-frontend
    app.kubernetes.io/version: "1.11.1"
    app.kubernetes.io/part-of: opentelemetry-demo
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - port: 8080
      name: tcp-service
      targetPort: 8080
  selector:
    
    opentelemetry.io/name: scale-otel-demo-frontend
---
# Source: opentelemetry-demo/templates/component.yaml
apiVersion: v1
kind: Service
metadata:
  name: scale-otel-demo-frontendproxy
  labels:
    helm.sh/chart: opentelemetry-demo-0.32.8
    
    opentelemetry.io/name: scale-otel-demo-frontendproxy
    app.kubernetes.io/instance: scale-otel-demo
    app.kubernetes.io/component: frontendproxy
    app.kubernetes.io/name: scale-otel-demo-frontendproxy
    app.kubernetes.io/version: "1.11.1"
    app.kubernetes.io/part-of: opentelemetry-demo
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - port: 8080
      name: tcp-service
      targetPort: 8080
  selector:
    
    opentelemetry.io/name: scale-otel-demo-frontendproxy
---
# Source: opentelemetry-demo/templates/component.yaml
apiVersion: v1
kind: Service
metadata:
  name: scale-otel-demo-imageprovider
  labels:
    helm.sh/chart: opentelemetry-demo-0.32.8
    
    opentelemetry.io/name: scale-otel-demo-imageprovider
    app.kubernetes.io/instance: scale-otel-demo
    app.kubernetes.io/component: imageprovider
    app.kubernetes.io/name: scale-otel-demo-imageprovider
    app.kubernetes.io/version: "1.11.1"
    app.kubernetes.io/part-of: opentelemetry-demo
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - port: 8081
      name: tcp-service
      targetPort: 8081
  selector:
    
    opentelemetry.io/name: scale-otel-demo-imageprovider
---
# Source: opentelemetry-demo/templates/component.yaml
apiVersion: v1
kind: Service
metadata:
  name: scale-otel-demo-kafka
  labels:
    helm.sh/chart: opentelemetry-demo-0.32.8
    
    opentelemetry.io/name: scale-otel-demo-kafka
    app.kubernetes.io/instance: scale-otel-demo
    app.kubernetes.io/component: kafka
    app.kubernetes.io/name: scale-otel-demo-kafka
    app.kubernetes.io/version: "1.11.1"
    app.kubernetes.io/part-of: opentelemetry-demo
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - port: 9092
      name: plaintext
      targetPort: 9092
    - port: 9093
      name: controller
      targetPort: 9093
  selector:
    
    opentelemetry.io/name: scale-otel-demo-kafka
---
# Source: opentelemetry-demo/templates/component.yaml
apiVersion: v1
kind: Service
metadata:
  name: scale-otel-demo-loadgenerator
  labels:
    helm.sh/chart: opentelemetry-demo-0.32.8
    
    opentelemetry.io/name: scale-otel-demo-loadgenerator
    app.kubernetes.io/instance: scale-otel-demo
    app.kubernetes.io/component: loadgenerator
    app.kubernetes.io/name: scale-otel-demo-loadgenerator
    app.kubernetes.io/version: "1.11.1"
    app.kubernetes.io/part-of: opentelemetry-demo
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - port: 8089
      name: tcp-service
      targetPort: 8089
  selector:
    
    opentelemetry.io/name: scale-otel-demo-loadgenerator
---
# Source: opentelemetry-demo/templates/component.yaml
apiVersion: v1
kind: Service
metadata:
  name: scale-otel-demo-paymentservice
  labels:
    helm.sh/chart: opentelemetry-demo-0.32.8
    
    opentelemetry.io/name: scale-otel-demo-paymentservice
    app.kubernetes.io/instance: scale-otel-demo
    app.kubernetes.io/component: paymentservice
    app.kubernetes.io/name: scale-otel-demo-paymentservice
    app.kubernetes.io/version: "1.11.1"
    app.kubernetes.io/part-of: opentelemetry-demo
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - port: 8080
      name: tcp-service
      targetPort: 8080
  selector:
    
    opentelemetry.io/name: scale-otel-demo-paymentservice
---
# Source: opentelemetry-demo/templates/component.yaml
apiVersion: v1
kind: Service
metadata:
  name: scale-otel-demo-productcatalogservice
  labels:
    helm.sh/chart: opentelemetry-demo-0.32.8
    
    opentelemetry.io/name: scale-otel-demo-productcatalogservice
    app.kubernetes.io/instance: scale-otel-demo
    app.kubernetes.io/component: productcatalogservice
    app.kubernetes.io/name: scale-otel-demo-productcatalogservice
    app.kubernetes.io/version: "1.11.1"
    app.kubernetes.io/part-of: opentelemetry-demo
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - port: 8080
      name: tcp-service
      targetPort: 8080
  selector:
    
    opentelemetry.io/name: scale-otel-demo-productcatalogservice
---
# Source: opentelemetry-demo/templates/component.yaml
apiVersion: v1
kind: Service
metadata:
  name: scale-otel-demo-quoteservice
  labels:
    helm.sh/chart: opentelemetry-demo-0.32.8
    
    opentelemetry.io/name: scale-otel-demo-quoteservice
    app.kubernetes.io/instance: scale-otel-demo
    app.kubernetes.io/component: quoteservice
    app.kubernetes.io/name: scale-otel-demo-quoteservice
    app.kubernetes.io/version: "1.11.1"
    app.kubernetes.io/part-of: opentelemetry-demo
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - port: 8080
      name: tcp-service
      targetPort: 8080
  selector:
    
    opentelemetry.io/name: scale-otel-demo-quoteservice
---
# Source: opentelemetry-demo/templates/component.yaml
apiVersion: v1
kind: Service
metadata:
  name: scale-otel-demo-recommendationservice
  labels:
    helm.sh/chart: opentelemetry-demo-0.32.8
    
    opentelemetry.io/name: scale-otel-demo-recommendationservice
    app.kubernetes.io/instance: scale-otel-demo
    app.kubernetes.io/component: recommendationservice
    app.kubernetes.io/name: scale-otel-demo-recommendationservice
    app.kubernetes.io/version: "1.11.1"
    app.kubernetes.io/part-of: opentelemetry-demo
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - port: 8080
      name: tcp-service
      targetPort: 8080
  selector:
    
    opentelemetry.io/name: scale-otel-demo-recommendationservice
---
# Source: opentelemetry-demo/templates/component.yaml
apiVersion: v1
kind: Service
metadata:
  name: scale-otel-demo-shippingservice
  labels:
    helm.sh/chart: opentelemetry-demo-0.32.8
    
    opentelemetry.io/name: scale-otel-demo-shippingservice
    app.kubernetes.io/instance: scale-otel-demo
    app.kubernetes.io/component: shippingservice
    app.kubernetes.io/name: scale-otel-demo-shippingservice
    app.kubernetes.io/version: "1.11.1"
    app.kubernetes.io/part-of: opentelemetry-demo
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - port: 8080
      name: tcp-service
      targetPort: 8080
  selector:
    
    opentelemetry.io/name: scale-otel-demo-shippingservice
---
# Source: opentelemetry-demo/templates/component.yaml
apiVersion: v1
kind: Service
metadata:
  name: scale-otel-demo-valkey
  labels:
    helm.sh/chart: opentelemetry-demo-0.32.8
    
    opentelemetry.io/name: scale-otel-demo-valkey
    app.kubernetes.io/instance: scale-otel-demo
    app.kubernetes.io/component: valkey
    app.kubernetes.io/name: scale-otel-demo-valkey
    app.kubernetes.io/version: "1.11.1"
    app.kubernetes.io/part-of: opentelemetry-demo
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - port: 6379
      name: valkey
      targetPort: 6379
  selector:
    
    opentelemetry.io/name: scale-otel-demo-valkey
---
# Source: opentelemetry-demo/templates/component.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: scale-otel-demo-accountingservice
  labels:
    helm.sh/chart: opentelemetry-demo-0.32.8
    
    opentelemetry.io/name: scale-otel-demo-accountingservice
    app.kubernetes.io/instance: scale-otel-demo
    app.kubernetes.io/component: accountingservice
    app.kubernetes.io/name: scale-otel-demo-accountingservice
    app.kubernetes.io/version: "1.11.1"
    app.kubernetes.io/part-of: opentelemetry-demo
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      
      opentelemetry.io/name: scale-otel-demo-accountingservice
  template:
    metadata:
      labels:
        
        opentelemetry.io/name: scale-otel-demo-accountingservice
        app.kubernetes.io/instance: scale-otel-demo
        app.kubernetes.io/component: accountingservice
        app.kubernetes.io/name: scale-otel-demo-accountingservice
    spec:
      serviceAccountName: scale-otel-demo
      containers:
        - name: accountingservice
          image: 'ghcr.io/open-telemetry/demo:1.11.1-accountingservice'
          imagePullPolicy: IfNotPresent
          env:
          - name: OTEL_SERVICE_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.labels['app.kubernetes.io/component']
          - name: OTEL_COLLECTOR_NAME
            value: otel-collector.monitoring.svc.cluster.local
          - name: OTEL_EXPORTER_OTLP_METRICS_TEMPORALITY_PREFERENCE
            value: cumulative
          - name: KAFKA_SERVICE_ADDR
            value: 'scale-otel-demo-kafka:9092'
          - name: OTEL_EXPORTER_OTLP_ENDPOINT
            value: http://$(OTEL_COLLECTOR_NAME):4317
          - name: OTEL_RESOURCE_ATTRIBUTES
            value: service.name=$(OTEL_SERVICE_NAME),service.namespace=opentelemetry-demo,service.version=1.11.1
          resources:
            limits:
              memory: 120Mi
          volumeMounts:
      volumes:
      initContainers:
        - command:
          - sh
          - -c
          - until nc -z -v -w30 scale-otel-demo-kafka 9092; do echo waiting
            for kafka; sleep 2; done;
          image: busybox:latest
          name: wait-for-kafka
---
# Source: opentelemetry-demo/templates/component.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: scale-otel-demo-adservice
  labels:
    helm.sh/chart: opentelemetry-demo-0.32.8
    
    opentelemetry.io/name: scale-otel-demo-adservice
    app.kubernetes.io/instance: scale-otel-demo
    app.kubernetes.io/component: adservice
    app.kubernetes.io/name: scale-otel-demo-adservice
    app.kubernetes.io/version: "1.11.1"
    app.kubernetes.io/part-of: opentelemetry-demo
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      
      opentelemetry.io/name: scale-otel-demo-adservice
  template:
    metadata:
      labels:
        
        opentelemetry.io/name: scale-otel-demo-adservice
        app.kubernetes.io/instance: scale-otel-demo
        app.kubernetes.io/component: adservice
        app.kubernetes.io/name: scale-otel-demo-adservice
    spec:
      serviceAccountName: scale-otel-demo
      containers:
        - name: adservice
          image: 'ghcr.io/open-telemetry/demo:1.11.1-adservice'
          imagePullPolicy: IfNotPresent
          ports:
          
          - containerPort: 8080
            name: service
          env:
          - name: OTEL_SERVICE_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.labels['app.kubernetes.io/component']
          - name: OTEL_COLLECTOR_NAME
            value: otel-collector.monitoring.svc.cluster.local
          - name: OTEL_EXPORTER_OTLP_METRICS_TEMPORALITY_PREFERENCE
            value: cumulative
          - name: AD_SERVICE_PORT
            value: "8080"
          - name: FLAGD_HOST
            value: 'scale-otel-demo-flagd'
          - name: FLAGD_PORT
            value: "8013"
          - name: OTEL_EXPORTER_OTLP_ENDPOINT
            value: http://$(OTEL_COLLECTOR_NAME):4318
          - name: OTEL_LOGS_EXPORTER
            value: otlp
          - name: OTEL_RESOURCE_ATTRIBUTES
            value: service.name=$(OTEL_SERVICE_NAME),service.namespace=opentelemetry-demo,service.version=1.11.1
          resources:
            limits:
              memory: 300Mi
          volumeMounts:
      volumes:
---
# Source: opentelemetry-demo/templates/component.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: scale-otel-demo-cartservice
  labels:
    helm.sh/chart: opentelemetry-demo-0.32.8
    
    opentelemetry.io/name: scale-otel-demo-cartservice
    app.kubernetes.io/instance: scale-otel-demo
    app.kubernetes.io/component: cartservice
    app.kubernetes.io/name: scale-otel-demo-cartservice
    app.kubernetes.io/version: "1.11.1"
    app.kubernetes.io/part-of: opentelemetry-demo
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      
      opentelemetry.io/name: scale-otel-demo-cartservice
  template:
    metadata:
      labels:
        
        opentelemetry.io/name: scale-otel-demo-cartservice
        app.kubernetes.io/instance: scale-otel-demo
        app.kubernetes.io/component: cartservice
        app.kubernetes.io/name: scale-otel-demo-cartservice
    spec:
      serviceAccountName: scale-otel-demo
      containers:
        - name: cartservice
          image: 'ghcr.io/open-telemetry/demo:1.11.1-cartservice'
          imagePullPolicy: IfNotPresent
          ports:
          
          - containerPort: 8080
            name: service
          env:
          - name: OTEL_SERVICE_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.labels['app.kubernetes.io/component']
          - name: OTEL_COLLECTOR_NAME
            value: otel-collector.monitoring.svc.cluster.local
          - name: OTEL_EXPORTER_OTLP_METRICS_TEMPORALITY_PREFERENCE
            value: cumulative
          - name: CART_SERVICE_PORT
            value: "8080"
          - name: ASPNETCORE_URLS
            value: http://*:$(CART_SERVICE_PORT)
          - name: VALKEY_ADDR
            value: 'scale-otel-demo-valkey:6379'
          - name: FLAGD_HOST
            value: 'scale-otel-demo-flagd'
          - name: FLAGD_PORT
            value: "8013"
          - name: OTEL_EXPORTER_OTLP_ENDPOINT
            value: http://$(OTEL_COLLECTOR_NAME):4317
          - name: OTEL_RESOURCE_ATTRIBUTES
            value: service.name=$(OTEL_SERVICE_NAME),service.namespace=opentelemetry-demo,service.version=1.11.1
          resources:
            limits:
              memory: 160Mi
          volumeMounts:
      volumes:
      initContainers:
        - command:
          - sh
          - -c
          - until nc -z -v -w30 scale-otel-demo-valkey 6379; do echo waiting
            for valkey; sleep 2; done;
          image: busybox:latest
          name: wait-for-valkey
---
# Source: opentelemetry-demo/templates/component.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: scale-otel-demo-checkoutservice
  labels:
    helm.sh/chart: opentelemetry-demo-0.32.8
    
    opentelemetry.io/name: scale-otel-demo-checkoutservice
    app.kubernetes.io/instance: scale-otel-demo
    app.kubernetes.io/component: checkoutservice
    app.kubernetes.io/name: scale-otel-demo-checkoutservice
    app.kubernetes.io/version: "1.11.1"
    app.kubernetes.io/part-of: opentelemetry-demo
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      
      opentelemetry.io/name: scale-otel-demo-checkoutservice
  template:
    metadata:
      labels:
        
        opentelemetry.io/name: scale-otel-demo-checkoutservice
        app.kubernetes.io/instance: scale-otel-demo
        app.kubernetes.io/component: checkoutservice
        app.kubernetes.io/name: scale-otel-demo-checkoutservice
    spec:
      serviceAccountName: scale-otel-demo
      containers:
        - name: checkoutservice
          image: 'ghcr.io/open-telemetry/demo:1.11.1-checkoutservice'
          imagePullPolicy: IfNotPresent
          ports:
          
          - containerPort: 8080
            name: service
          env:
          - name: OTEL_SERVICE_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.labels['app.kubernetes.io/component']
          - name: OTEL_COLLECTOR_NAME
            value: otel-collector.monitoring.svc.cluster.local
          - name: OTEL_EXPORTER_OTLP_METRICS_TEMPORALITY_PREFERENCE
            value: cumulative
          - name: CHECKOUT_SERVICE_PORT
            value: "8080"
          - name: CART_SERVICE_ADDR
            value: 'scale-otel-demo-cartservice:8080'
          - name: CURRENCY_SERVICE_ADDR
            value: 'scale-otel-demo-currencyservice:8080'
          - name: EMAIL_SERVICE_ADDR
            value: http://scale-otel-demo-emailservice:8080
          - name: PAYMENT_SERVICE_ADDR
            value: 'scale-otel-demo-paymentservice:8080'
          - name: PRODUCT_CATALOG_SERVICE_ADDR
            value: 'scale-otel-demo-productcatalogservice:8080'
          - name: SHIPPING_SERVICE_ADDR
            value: 'scale-otel-demo-shippingservice:8080'
          - name: KAFKA_SERVICE_ADDR
            value: 'scale-otel-demo-kafka:9092'
          - name: FLAGD_HOST
            value: 'scale-otel-demo-flagd'
          - name: FLAGD_PORT
            value: "8013"
          - name: OTEL_EXPORTER_OTLP_ENDPOINT
            value: http://$(OTEL_COLLECTOR_NAME):4317
          - name: OTEL_RESOURCE_ATTRIBUTES
            value: service.name=$(OTEL_SERVICE_NAME),service.namespace=opentelemetry-demo,service.version=1.11.1
          resources:
            limits:
              memory: 20Mi
          volumeMounts:
      volumes:
      initContainers:
        - command:
          - sh
          - -c
          - until nc -z -v -w30 scale-otel-demo-kafka 9092; do echo waiting
            for kafka; sleep 2; done;
          image: busybox:latest
          name: wait-for-kafka
---
# Source: opentelemetry-demo/templates/component.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: scale-otel-demo-currencyservice
  labels:
    helm.sh/chart: opentelemetry-demo-0.32.8
    
    opentelemetry.io/name: scale-otel-demo-currencyservice
    app.kubernetes.io/instance: scale-otel-demo
    app.kubernetes.io/component: currencyservice
    app.kubernetes.io/name: scale-otel-demo-currencyservice
    app.kubernetes.io/version: "1.11.1"
    app.kubernetes.io/part-of: opentelemetry-demo
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      
      opentelemetry.io/name: scale-otel-demo-currencyservice
  template:
    metadata:
      labels:
        
        opentelemetry.io/name: scale-otel-demo-currencyservice
        app.kubernetes.io/instance: scale-otel-demo
        app.kubernetes.io/component: currencyservice
        app.kubernetes.io/name: scale-otel-demo-currencyservice
    spec:
      serviceAccountName: scale-otel-demo
      containers:
        - name: currencyservice
          image: 'ghcr.io/open-telemetry/demo:1.11.1-currencyservice'
          imagePullPolicy: IfNotPresent
          ports:
          
          - containerPort: 8080
            name: service
          env:
          - name: OTEL_SERVICE_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.labels['app.kubernetes.io/component']
          - name: OTEL_COLLECTOR_NAME
            value: otel-collector.monitoring.svc.cluster.local
          - name: OTEL_EXPORTER_OTLP_METRICS_TEMPORALITY_PREFERENCE
            value: cumulative
          - name: CURRENCY_SERVICE_PORT
            value: "8080"
          - name: OTEL_EXPORTER_OTLP_ENDPOINT
            value: http://$(OTEL_COLLECTOR_NAME):4317
          - name: VERSION
            value: '1.11.1'
          - name: OTEL_RESOURCE_ATTRIBUTES
            value: service.name=$(OTEL_SERVICE_NAME),service.namespace=opentelemetry-demo,service.version=1.11.1
          resources:
            limits:
              memory: 20Mi
          volumeMounts:
      volumes:
---
# Source: opentelemetry-demo/templates/component.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: scale-otel-demo-emailservice
  labels:
    helm.sh/chart: opentelemetry-demo-0.32.8
    
    opentelemetry.io/name: scale-otel-demo-emailservice
    app.kubernetes.io/instance: scale-otel-demo
    app.kubernetes.io/component: emailservice
    app.kubernetes.io/name: scale-otel-demo-emailservice
    app.kubernetes.io/version: "1.11.1"
    app.kubernetes.io/part-of: opentelemetry-demo
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      
      opentelemetry.io/name: scale-otel-demo-emailservice
  template:
    metadata:
      labels:
        
        opentelemetry.io/name: scale-otel-demo-emailservice
        app.kubernetes.io/instance: scale-otel-demo
        app.kubernetes.io/component: emailservice
        app.kubernetes.io/name: scale-otel-demo-emailservice
    spec:
      serviceAccountName: scale-otel-demo
      containers:
        - name: emailservice
          image: 'ghcr.io/open-telemetry/demo:1.11.1-emailservice'
          imagePullPolicy: IfNotPresent
          ports:
          
          - containerPort: 8080
            name: service
          env:
          - name: OTEL_SERVICE_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.labels['app.kubernetes.io/component']
          - name: OTEL_COLLECTOR_NAME
            value: otel-collector.monitoring.svc.cluster.local
          - name: OTEL_EXPORTER_OTLP_METRICS_TEMPORALITY_PREFERENCE
            value: cumulative
          - name: EMAIL_SERVICE_PORT
            value: "8080"
          - name: APP_ENV
            value: production
          - name: OTEL_EXPORTER_OTLP_TRACES_ENDPOINT
            value: http://$(OTEL_COLLECTOR_NAME):4318/v1/traces
          - name: OTEL_RESOURCE_ATTRIBUTES
            value: service.name=$(OTEL_SERVICE_NAME),service.namespace=opentelemetry-demo,service.version=1.11.1
          resources:
            limits:
              memory: 100Mi
          volumeMounts:
      volumes:
---
# Source: opentelemetry-demo/templates/component.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: scale-otel-demo-flagd
  labels:
    helm.sh/chart: opentelemetry-demo-0.32.8
    
    opentelemetry.io/name: scale-otel-demo-flagd
    app.kubernetes.io/instance: scale-otel-demo
    app.kubernetes.io/component: flagd
    app.kubernetes.io/name: scale-otel-demo-flagd
    app.kubernetes.io/version: "1.11.1"
    app.kubernetes.io/part-of: opentelemetry-demo
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      
      opentelemetry.io/name: scale-otel-demo-flagd
  template:
    metadata:
      labels:
        
        opentelemetry.io/name: scale-otel-demo-flagd
        app.kubernetes.io/instance: scale-otel-demo
        app.kubernetes.io/component: flagd
        app.kubernetes.io/name: scale-otel-demo-flagd
    spec:
      serviceAccountName: scale-otel-demo
      containers:
        - name: flagd
          image: 'ghcr.io/open-feature/flagd:v0.11.1'
          imagePullPolicy: IfNotPresent
          command:
          - /flagd-build
          - start
          - --uri
          - file:./etc/flagd/demo.flagd.json
          ports:
          
          - containerPort: 8013
            name: service
          env:
          - name: OTEL_SERVICE_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.labels['app.kubernetes.io/component']
          - name: OTEL_COLLECTOR_NAME
            value: otel-collector.monitoring.svc.cluster.local
          - name: OTEL_EXPORTER_OTLP_METRICS_TEMPORALITY_PREFERENCE
            value: cumulative
          - name: FLAGD_METRICS_EXPORTER
            value: otel
          - name: FLAGD_OTEL_COLLECTOR_URI
            value: $(OTEL_COLLECTOR_NAME):4317
          - name: OTEL_RESOURCE_ATTRIBUTES
            value: service.name=$(OTEL_SERVICE_NAME),service.namespace=opentelemetry-demo,service.version=1.11.1
          resources:
            limits:
              memory: 50Mi
          volumeMounts:
            - name: config
              mountPath: /etc/flagd
      volumes:
        - name: config
          configMap:
            name: scale-otel-demo-flagd-config
---
# Source: opentelemetry-demo/templates/component.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: scale-otel-demo-frauddetectionservice
  labels:
    helm.sh/chart: opentelemetry-demo-0.32.8
    
    opentelemetry.io/name: scale-otel-demo-frauddetectionservice
    app.kubernetes.io/instance: scale-otel-demo
    app.kubernetes.io/component: frauddetectionservice
    app.kubernetes.io/name: scale-otel-demo-frauddetectionservice
    app.kubernetes.io/version: "1.11.1"
    app.kubernetes.io/part-of: opentelemetry-demo
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      
      opentelemetry.io/name: scale-otel-demo-frauddetectionservice
  template:
    metadata:
      labels:
        
        opentelemetry.io/name: scale-otel-demo-frauddetectionservice
        app.kubernetes.io/instance: scale-otel-demo
        app.kubernetes.io/component: frauddetectionservice
        app.kubernetes.io/name: scale-otel-demo-frauddetectionservice
    spec:
      serviceAccountName: scale-otel-demo
      containers:
        - name: frauddetectionservice
          image: 'ghcr.io/open-telemetry/demo:1.11.1-frauddetectionservice'
          imagePullPolicy: IfNotPresent
          env:
          - name: OTEL_SERVICE_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.labels['app.kubernetes.io/component']
          - name: OTEL_COLLECTOR_NAME
            value: otel-collector.monitoring.svc.cluster.local
          - name: OTEL_EXPORTER_OTLP_METRICS_TEMPORALITY_PREFERENCE
            value: cumulative
          - name: KAFKA_SERVICE_ADDR
            value: 'scale-otel-demo-kafka:9092'
          - name: FLAGD_HOST
            value: 'scale-otel-demo-flagd'
          - name: FLAGD_PORT
            value: "8013"
          - name: OTEL_EXPORTER_OTLP_ENDPOINT
            value: http://$(OTEL_COLLECTOR_NAME):4318
          - name: OTEL_RESOURCE_ATTRIBUTES
            value: service.name=$(OTEL_SERVICE_NAME),service.namespace=opentelemetry-demo,service.version=1.11.1
          resources:
            limits:
              memory: 300Mi
          volumeMounts:
      volumes:
      initContainers:
        - command:
          - sh
          - -c
          - until nc -z -v -w30 scale-otel-demo-kafka 9092; do echo waiting
            for kafka; sleep 2; done;
          image: busybox:latest
          name: wait-for-kafka
---
# Source: opentelemetry-demo/templates/component.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: scale-otel-demo-frontend
  labels:
    helm.sh/chart: opentelemetry-demo-0.32.8
    
    opentelemetry.io/name: scale-otel-demo-frontend
    app.kubernetes.io/instance: scale-otel-demo
    app.kubernetes.io/component: frontend
    app.kubernetes.io/name: scale-otel-demo-frontend
    app.kubernetes.io/version: "1.11.1"
    app.kubernetes.io/part-of: opentelemetry-demo
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      
      opentelemetry.io/name: scale-otel-demo-frontend
  template:
    metadata:
      labels:
        
        opentelemetry.io/name: scale-otel-demo-frontend
        app.kubernetes.io/instance: scale-otel-demo
        app.kubernetes.io/component: frontend
        app.kubernetes.io/name: scale-otel-demo-frontend
    spec:
      serviceAccountName: scale-otel-demo
      containers:
        - name: frontend
          image: 'ghcr.io/open-telemetry/demo:1.11.1-frontend'
          imagePullPolicy: IfNotPresent
          ports:
          
          - containerPort: 8080
            name: service
          env:
          - name: OTEL_SERVICE_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.labels['app.kubernetes.io/component']
          - name: OTEL_COLLECTOR_NAME
            value: otel-collector.monitoring.svc.cluster.local
          - name: OTEL_EXPORTER_OTLP_METRICS_TEMPORALITY_PREFERENCE
            value: cumulative
          - name: FRONTEND_PORT
            value: "8080"
          - name: FRONTEND_ADDR
            value: :8080
          - name: AD_SERVICE_ADDR
            value: 'scale-otel-demo-adservice:8080'
          - name: CART_SERVICE_ADDR
            value: 'scale-otel-demo-cartservice:8080'
          - name: CHECKOUT_SERVICE_ADDR
            value: 'scale-otel-demo-checkoutservice:8080'
          - name: CURRENCY_SERVICE_ADDR
            value: 'scale-otel-demo-currencyservice:8080'
          - name: PRODUCT_CATALOG_SERVICE_ADDR
            value: 'scale-otel-demo-productcatalogservice:8080'
          - name: RECOMMENDATION_SERVICE_ADDR
            value: 'scale-otel-demo-recommendationservice:8080'
          - name: SHIPPING_SERVICE_ADDR
            value: 'scale-otel-demo-shippingservice:8080'
          - name: FLAGD_HOST
            value: 'scale-otel-demo-flagd'
          - name: FLAGD_PORT
            value: "8013"
          - name: OTEL_COLLECTOR_HOST
            value: $(OTEL_COLLECTOR_NAME)
          - name: OTEL_EXPORTER_OTLP_ENDPOINT
            value: http://$(OTEL_COLLECTOR_NAME):4317
          - name: WEB_OTEL_SERVICE_NAME
            value: frontend-web
          - name: PUBLIC_OTEL_EXPORTER_OTLP_TRACES_ENDPOINT
            value: http://localhost:8080/otlp-http/v1/traces
          - name: OTEL_RESOURCE_ATTRIBUTES
            value: service.name=$(OTEL_SERVICE_NAME),service.namespace=opentelemetry-demo,service.version=1.11.1
          resources:
            limits:
              memory: 250Mi
          securityContext:
            runAsGroup: 1001
            runAsNonRoot: true
            runAsUser: 1001
          volumeMounts:
      volumes:
---
# Source: opentelemetry-demo/templates/component.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: scale-otel-demo-frontendproxy
  labels:
    helm.sh/chart: opentelemetry-demo-0.32.8
    
    opentelemetry.io/name: scale-otel-demo-frontendproxy
    app.kubernetes.io/instance: scale-otel-demo
    app.kubernetes.io/component: frontendproxy
    app.kubernetes.io/name: scale-otel-demo-frontendproxy
    app.kubernetes.io/version: "1.11.1"
    app.kubernetes.io/part-of: opentelemetry-demo
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      
      opentelemetry.io/name: scale-otel-demo-frontendproxy
  template:
    metadata:
      labels:
        
        opentelemetry.io/name: scale-otel-demo-frontendproxy
        app.kubernetes.io/instance: scale-otel-demo
        app.kubernetes.io/component: frontendproxy
        app.kubernetes.io/name: scale-otel-demo-frontendproxy
    spec:
      serviceAccountName: scale-otel-demo
      containers:
        - name: frontendproxy
          image: 'ghcr.io/open-telemetry/demo:1.11.1-frontendproxy'
          imagePullPolicy: IfNotPresent
          ports:
          
          - containerPort: 8080
            name: service
          env:
          - name: OTEL_SERVICE_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.labels['app.kubernetes.io/component']
          - name: OTEL_COLLECTOR_NAME
            value: otel-collector.monitoring.svc.cluster.local
          - name: OTEL_EXPORTER_OTLP_METRICS_TEMPORALITY_PREFERENCE
            value: cumulative
          - name: ENVOY_PORT
            value: "8080"
          - name: FLAGD_HOST
            value: 'scale-otel-demo-flagd'
          - name: FLAGD_PORT
            value: "8013"
          - name: FRONTEND_HOST
            value: 'scale-otel-demo-frontend'
          - name: FRONTEND_PORT
            value: "8080"
          - name: GRAFANA_SERVICE_HOST
            value: 'scale-otel-demo-grafana'
          - name: GRAFANA_SERVICE_PORT
            value: "80"
          - name: IMAGE_PROVIDER_HOST
            value: 'scale-otel-demo-imageprovider'
          - name: IMAGE_PROVIDER_PORT
            value: "8081"
          - name: JAEGER_SERVICE_HOST
            value: 'scale-otel-demo-jaeger-query'
          - name: JAEGER_SERVICE_PORT
            value: "16686"
          - name: LOCUST_WEB_HOST
            value: 'scale-otel-demo-loadgenerator'
          - name: LOCUST_WEB_PORT
            value: "8089"
          - name: OTEL_COLLECTOR_HOST
            value: $(OTEL_COLLECTOR_NAME)
          - name: OTEL_COLLECTOR_PORT_GRPC
            value: "4317"
          - name: OTEL_COLLECTOR_PORT_HTTP
            value: "4318"
          - name: OTEL_RESOURCE_ATTRIBUTES
            value: service.name=$(OTEL_SERVICE_NAME),service.namespace=opentelemetry-demo,service.version=1.11.1
          resources:
            limits:
              memory: 50Mi
          securityContext:
            runAsGroup: 101
            runAsNonRoot: true
            runAsUser: 101
          volumeMounts:
      volumes:
---
# Source: opentelemetry-demo/templates/component.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: scale-otel-demo-imageprovider
  labels:
    helm.sh/chart: opentelemetry-demo-0.32.8
    
    opentelemetry.io/name: scale-otel-demo-imageprovider
    app.kubernetes.io/instance: scale-otel-demo
    app.kubernetes.io/component: imageprovider
    app.kubernetes.io/name: scale-otel-demo-imageprovider
    app.kubernetes.io/version: "1.11.1"
    app.kubernetes.io/part-of: opentelemetry-demo
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      
      opentelemetry.io/name: scale-otel-demo-imageprovider
  template:
    metadata:
      labels:
        
        opentelemetry.io/name: scale-otel-demo-imageprovider
        app.kubernetes.io/instance: scale-otel-demo
        app.kubernetes.io/component: imageprovider
        app.kubernetes.io/name: scale-otel-demo-imageprovider
    spec:
      serviceAccountName: scale-otel-demo
      containers:
        - name: imageprovider
          image: 'ghcr.io/open-telemetry/demo:1.11.1-imageprovider'
          imagePullPolicy: IfNotPresent
          ports:
          
          - containerPort: 8081
            name: service
          env:
          - name: OTEL_SERVICE_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.labels['app.kubernetes.io/component']
          - name: OTEL_COLLECTOR_NAME
            value: otel-collector.monitoring.svc.cluster.local
          - name: OTEL_EXPORTER_OTLP_METRICS_TEMPORALITY_PREFERENCE
            value: cumulative
          - name: IMAGE_PROVIDER_PORT
            value: "8081"
          - name: OTEL_COLLECTOR_PORT_GRPC
            value: "4317"
          - name: OTEL_COLLECTOR_HOST
            value: $(OTEL_COLLECTOR_NAME)
          - name: OTEL_RESOURCE_ATTRIBUTES
            value: service.name=$(OTEL_SERVICE_NAME),service.namespace=opentelemetry-demo,service.version=1.11.1
          resources:
            limits:
              memory: 50Mi
          volumeMounts:
      volumes:
---
# Source: opentelemetry-demo/templates/component.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: scale-otel-demo-kafka
  labels:
    helm.sh/chart: opentelemetry-demo-0.32.8
    
    opentelemetry.io/name: scale-otel-demo-kafka
    app.kubernetes.io/instance: scale-otel-demo
    app.kubernetes.io/component: kafka
    app.kubernetes.io/name: scale-otel-demo-kafka
    app.kubernetes.io/version: "1.11.1"
    app.kubernetes.io/part-of: opentelemetry-demo
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      
      opentelemetry.io/name: scale-otel-demo-kafka
  template:
    metadata:
      labels:
        
        opentelemetry.io/name: scale-otel-demo-kafka
        app.kubernetes.io/instance: scale-otel-demo
        app.kubernetes.io/component: kafka
        app.kubernetes.io/name: scale-otel-demo-kafka
    spec:
      serviceAccountName: scale-otel-demo
      containers:
        - name: kafka
          image: 'ghcr.io/open-telemetry/demo:1.11.1-kafka'
          imagePullPolicy: IfNotPresent
          ports:
          
          - containerPort: 9092
            name: plaintext
          - containerPort: 9093
            name: controller
          env:
          - name: OTEL_SERVICE_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.labels['app.kubernetes.io/component']
          - name: OTEL_COLLECTOR_NAME
            value: otel-collector.monitoring.svc.cluster.local
          - name: OTEL_EXPORTER_OTLP_METRICS_TEMPORALITY_PREFERENCE
            value: cumulative
          - name: KAFKA_ADVERTISED_LISTENERS
            value: PLAINTEXT://scale-otel-demo-kafka:9092
          - name: OTEL_EXPORTER_OTLP_ENDPOINT
            value: http://$(OTEL_COLLECTOR_NAME):4318
          - name: KAFKA_HEAP_OPTS
            value: -Xmx400M -Xms400M
          - name: OTEL_RESOURCE_ATTRIBUTES
            value: service.name=$(OTEL_SERVICE_NAME),service.namespace=opentelemetry-demo,service.version=1.11.1
          resources:
            limits:
              memory: 600Mi
          securityContext:
            runAsGroup: 1000
            runAsNonRoot: true
            runAsUser: 1000
          volumeMounts:
      volumes:
---
# Source: opentelemetry-demo/templates/component.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: scale-otel-demo-loadgenerator
  labels:
    helm.sh/chart: opentelemetry-demo-0.32.8
    
    opentelemetry.io/name: scale-otel-demo-loadgenerator
    app.kubernetes.io/instance: scale-otel-demo
    app.kubernetes.io/component: loadgenerator
    app.kubernetes.io/name: scale-otel-demo-loadgenerator
    app.kubernetes.io/version: "1.11.1"
    app.kubernetes.io/part-of: opentelemetry-demo
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      
      opentelemetry.io/name: scale-otel-demo-loadgenerator
  template:
    metadata:
      labels:
        
        opentelemetry.io/name: scale-otel-demo-loadgenerator
        app.kubernetes.io/instance: scale-otel-demo
        app.kubernetes.io/component: loadgenerator
        app.kubernetes.io/name: scale-otel-demo-loadgenerator
    spec:
      serviceAccountName: scale-otel-demo
      containers:
        - name: loadgenerator
          image: 'ghcr.io/open-telemetry/demo:1.11.1-loadgenerator'
          imagePullPolicy: IfNotPresent
          ports:
          
          - containerPort: 8089
            name: service
          env:
          - name: OTEL_SERVICE_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.labels['app.kubernetes.io/component']
          - name: OTEL_COLLECTOR_NAME
            value: otel-collector.monitoring.svc.cluster.local
          - name: OTEL_EXPORTER_OTLP_METRICS_TEMPORALITY_PREFERENCE
            value: cumulative
          - name: LOCUST_WEB_PORT
            value: "8089"
          - name: LOCUST_USERS
            value: "10"
          - name: LOCUST_SPAWN_RATE
            value: "1"
          - name: LOCUST_HOST
            value: http://scale-otel-demo-frontendproxy:8080
          - name: LOCUST_HEADLESS
            value: "false"
          - name: LOCUST_AUTOSTART
            value: "true"
          - name: LOCUST_BROWSER_TRAFFIC_ENABLED
            value: "true"
          - name: PROTOCOL_BUFFERS_PYTHON_IMPLEMENTATION
            value: python
          - name: FLAGD_HOST
            value: 'scale-otel-demo-flagd'
          - name: FLAGD_PORT
            value: "8013"
          - name: OTEL_EXPORTER_OTLP_ENDPOINT
            value: http://$(OTEL_COLLECTOR_NAME):4317
          - name: OTEL_RESOURCE_ATTRIBUTES
            value: service.name=$(OTEL_SERVICE_NAME),service.namespace=opentelemetry-demo,service.version=1.11.1
          resources:
            limits:
              memory: 1Gi
          volumeMounts:
      volumes:
---
# Source: opentelemetry-demo/templates/component.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: scale-otel-demo-paymentservice
  labels:
    helm.sh/chart: opentelemetry-demo-0.32.8
    
    opentelemetry.io/name: scale-otel-demo-paymentservice
    app.kubernetes.io/instance: scale-otel-demo
    app.kubernetes.io/component: paymentservice
    app.kubernetes.io/name: scale-otel-demo-paymentservice
    app.kubernetes.io/version: "1.11.1"
    app.kubernetes.io/part-of: opentelemetry-demo
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      
      opentelemetry.io/name: scale-otel-demo-paymentservice
  template:
    metadata:
      labels:
        
        opentelemetry.io/name: scale-otel-demo-paymentservice
        app.kubernetes.io/instance: scale-otel-demo
        app.kubernetes.io/component: paymentservice
        app.kubernetes.io/name: scale-otel-demo-paymentservice
    spec:
      serviceAccountName: scale-otel-demo
      containers:
        - name: paymentservice
          image: 'ghcr.io/open-telemetry/demo:1.11.1-paymentservice'
          imagePullPolicy: IfNotPresent
          ports:
          
          - containerPort: 8080
            name: service
          env:
          - name: OTEL_SERVICE_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.labels['app.kubernetes.io/component']
          - name: OTEL_COLLECTOR_NAME
            value: otel-collector.monitoring.svc.cluster.local
          - name: OTEL_EXPORTER_OTLP_METRICS_TEMPORALITY_PREFERENCE
            value: cumulative
          - name: PAYMENT_SERVICE_PORT
            value: "8080"
          - name: FLAGD_HOST
            value: 'scale-otel-demo-flagd'
          - name: FLAGD_PORT
            value: "8013"
          - name: OTEL_EXPORTER_OTLP_ENDPOINT
            value: http://$(OTEL_COLLECTOR_NAME):4317
          - name: OTEL_RESOURCE_ATTRIBUTES
            value: service.name=$(OTEL_SERVICE_NAME),service.namespace=opentelemetry-demo,service.version=1.11.1
          resources:
            limits:
              memory: 120Mi
          securityContext:
            runAsGroup: 1000
            runAsNonRoot: true
            runAsUser: 1000
          volumeMounts:
      volumes:
---
# Source: opentelemetry-demo/templates/component.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: scale-otel-demo-productcatalogservice
  labels:
    helm.sh/chart: opentelemetry-demo-0.32.8
    
    opentelemetry.io/name: scale-otel-demo-productcatalogservice
    app.kubernetes.io/instance: scale-otel-demo
    app.kubernetes.io/component: productcatalogservice
    app.kubernetes.io/name: scale-otel-demo-productcatalogservice
    app.kubernetes.io/version: "1.11.1"
    app.kubernetes.io/part-of: opentelemetry-demo
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      
      opentelemetry.io/name: scale-otel-demo-productcatalogservice
  template:
    metadata:
      labels:
        
        opentelemetry.io/name: scale-otel-demo-productcatalogservice
        app.kubernetes.io/instance: scale-otel-demo
        app.kubernetes.io/component: productcatalogservice
        app.kubernetes.io/name: scale-otel-demo-productcatalogservice
    spec:
      serviceAccountName: scale-otel-demo
      containers:
        - name: productcatalogservice
          image: 'ghcr.io/open-telemetry/demo:1.11.1-productcatalogservice'
          imagePullPolicy: IfNotPresent
          ports:
          
          - containerPort: 8080
            name: service
          env:
          - name: OTEL_SERVICE_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.labels['app.kubernetes.io/component']
          - name: OTEL_COLLECTOR_NAME
            value: otel-collector.monitoring.svc.cluster.local
          - name: OTEL_EXPORTER_OTLP_METRICS_TEMPORALITY_PREFERENCE
            value: cumulative
          - name: PRODUCT_CATALOG_SERVICE_PORT
            value: "8080"
          - name: FLAGD_HOST
            value: 'scale-otel-demo-flagd'
          - name: FLAGD_PORT
            value: "8013"
          - name: OTEL_EXPORTER_OTLP_ENDPOINT
            value: http://$(OTEL_COLLECTOR_NAME):4317
          - name: OTEL_RESOURCE_ATTRIBUTES
            value: service.name=$(OTEL_SERVICE_NAME),service.namespace=opentelemetry-demo,service.version=1.11.1
          resources:
            limits:
              memory: 20Mi
          volumeMounts:
      volumes:
---
# Source: opentelemetry-demo/templates/component.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: scale-otel-demo-quoteservice
  labels:
    helm.sh/chart: opentelemetry-demo-0.32.8
    
    opentelemetry.io/name: scale-otel-demo-quoteservice
    app.kubernetes.io/instance: scale-otel-demo
    app.kubernetes.io/component: quoteservice
    app.kubernetes.io/name: scale-otel-demo-quoteservice
    app.kubernetes.io/version: "1.11.1"
    app.kubernetes.io/part-of: opentelemetry-demo
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      
      opentelemetry.io/name: scale-otel-demo-quoteservice
  template:
    metadata:
      labels:
        
        opentelemetry.io/name: scale-otel-demo-quoteservice
        app.kubernetes.io/instance: scale-otel-demo
        app.kubernetes.io/component: quoteservice
        app.kubernetes.io/name: scale-otel-demo-quoteservice
    spec:
      serviceAccountName: scale-otel-demo
      containers:
        - name: quoteservice
          image: 'ghcr.io/open-telemetry/demo:1.11.1-quoteservice'
          imagePullPolicy: IfNotPresent
          ports:
          
          - containerPort: 8080
            name: service
          env:
          - name: OTEL_SERVICE_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.labels['app.kubernetes.io/component']
          - name: OTEL_COLLECTOR_NAME
            value: otel-collector.monitoring.svc.cluster.local
          - name: OTEL_EXPORTER_OTLP_METRICS_TEMPORALITY_PREFERENCE
            value: cumulative
          - name: QUOTE_SERVICE_PORT
            value: "8080"
          - name: OTEL_PHP_AUTOLOAD_ENABLED
            value: "true"
          - name: OTEL_EXPORTER_OTLP_ENDPOINT
            value: http://$(OTEL_COLLECTOR_NAME):4318
          - name: OTEL_RESOURCE_ATTRIBUTES
            value: service.name=$(OTEL_SERVICE_NAME),service.namespace=opentelemetry-demo,service.version=1.11.1
          resources:
            limits:
              memory: 40Mi
          securityContext:
            runAsGroup: 33
            runAsNonRoot: true
            runAsUser: 33
          volumeMounts:
      volumes:
---
# Source: opentelemetry-demo/templates/component.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: scale-otel-demo-recommendationservice
  labels:
    helm.sh/chart: opentelemetry-demo-0.32.8
    
    opentelemetry.io/name: scale-otel-demo-recommendationservice
    app.kubernetes.io/instance: scale-otel-demo
    app.kubernetes.io/component: recommendationservice
    app.kubernetes.io/name: scale-otel-demo-recommendationservice
    app.kubernetes.io/version: "1.11.1"
    app.kubernetes.io/part-of: opentelemetry-demo
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      
      opentelemetry.io/name: scale-otel-demo-recommendationservice
  template:
    metadata:
      labels:
        
        opentelemetry.io/name: scale-otel-demo-recommendationservice
        app.kubernetes.io/instance: scale-otel-demo
        app.kubernetes.io/component: recommendationservice
        app.kubernetes.io/name: scale-otel-demo-recommendationservice
    spec:
      serviceAccountName: scale-otel-demo
      containers:
        - name: recommendationservice
          image: 'ghcr.io/open-telemetry/demo:1.11.1-recommendationservice'
          imagePullPolicy: IfNotPresent
          ports:
          
          - containerPort: 8080
            name: service
          env:
          - name: OTEL_SERVICE_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.labels['app.kubernetes.io/component']
          - name: OTEL_COLLECTOR_NAME
            value: otel-collector.monitoring.svc.cluster.local
          - name: OTEL_EXPORTER_OTLP_METRICS_TEMPORALITY_PREFERENCE
            value: cumulative
          - name: RECOMMENDATION_SERVICE_PORT
            value: "8080"
          - name: PRODUCT_CATALOG_SERVICE_ADDR
            value: 'scale-otel-demo-productcatalogservice:8080'
          - name: OTEL_PYTHON_LOG_CORRELATION
            value: "true"
          - name: PROTOCOL_BUFFERS_PYTHON_IMPLEMENTATION
            value: python
          - name: FLAGD_HOST
            value: 'scale-otel-demo-flagd'
          - name: FLAGD_PORT
            value: "8013"
          - name: OTEL_EXPORTER_OTLP_ENDPOINT
            value: http://$(OTEL_COLLECTOR_NAME):4317
          - name: OTEL_RESOURCE_ATTRIBUTES
            value: service.name=$(OTEL_SERVICE_NAME),service.namespace=opentelemetry-demo,service.version=1.11.1
          resources:
            limits:
              memory: 500Mi
          volumeMounts:
      volumes:
---
# Source: opentelemetry-demo/templates/component.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: scale-otel-demo-shippingservice
  labels:
    helm.sh/chart: opentelemetry-demo-0.32.8
    
    opentelemetry.io/name: scale-otel-demo-shippingservice
    app.kubernetes.io/instance: scale-otel-demo
    app.kubernetes.io/component: shippingservice
    app.kubernetes.io/name: scale-otel-demo-shippingservice
    app.kubernetes.io/version: "1.11.1"
    app.kubernetes.io/part-of: opentelemetry-demo
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      
      opentelemetry.io/name: scale-otel-demo-shippingservice
  template:
    metadata:
      labels:
        
        opentelemetry.io/name: scale-otel-demo-shippingservice
        app.kubernetes.io/instance: scale-otel-demo
        app.kubernetes.io/component: shippingservice
        app.kubernetes.io/name: scale-otel-demo-shippingservice
    spec:
      serviceAccountName: scale-otel-demo
      containers:
        - name: shippingservice
          image: 'ghcr.io/open-telemetry/demo:1.11.1-shippingservice'
          imagePullPolicy: IfNotPresent
          ports:
          
          - containerPort: 8080
            name: service
          env:
          - name: OTEL_SERVICE_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.labels['app.kubernetes.io/component']
          - name: OTEL_COLLECTOR_NAME
            value: otel-collector.monitoring.svc.cluster.local
          - name: OTEL_EXPORTER_OTLP_METRICS_TEMPORALITY_PREFERENCE
            value: cumulative
          - name: SHIPPING_SERVICE_PORT
            value: "8080"
          - name: QUOTE_SERVICE_ADDR
            value: http://scale-otel-demo-quoteservice:8080
          - name: OTEL_EXPORTER_OTLP_ENDPOINT
            value: http://$(OTEL_COLLECTOR_NAME):4317
          - name: OTEL_RESOURCE_ATTRIBUTES
            value: service.name=$(OTEL_SERVICE_NAME),service.namespace=opentelemetry-demo,service.version=1.11.1
          resources:
            limits:
              memory: 20Mi
          volumeMounts:
      volumes:
---
# Source: opentelemetry-demo/templates/component.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: scale-otel-demo-valkey
  labels:
    helm.sh/chart: opentelemetry-demo-0.32.8
    
    opentelemetry.io/name: scale-otel-demo-valkey
    app.kubernetes.io/instance: scale-otel-demo
    app.kubernetes.io/component: valkey
    app.kubernetes.io/name: scale-otel-demo-valkey
    app.kubernetes.io/version: "1.11.1"
    app.kubernetes.io/part-of: opentelemetry-demo
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      
      opentelemetry.io/name: scale-otel-demo-valkey
  template:
    metadata:
      labels:
        
        opentelemetry.io/name: scale-otel-demo-valkey
        app.kubernetes.io/instance: scale-otel-demo
        app.kubernetes.io/component: valkey
        app.kubernetes.io/name: scale-otel-demo-valkey
    spec:
      serviceAccountName: scale-otel-demo
      containers:
        - name: valkey
          image: 'valkey/valkey:7.2-alpine'
          imagePullPolicy: IfNotPresent
          ports:
          
          - containerPort: 6379
            name: valkey
          env:
          - name: OTEL_SERVICE_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.labels['app.kubernetes.io/component']
          - name: OTEL_COLLECTOR_NAME
            value: otel-collector.monitoring.svc.cluster.local
          - name: OTEL_EXPORTER_OTLP_METRICS_TEMPORALITY_PREFERENCE
            value: cumulative
          - name: OTEL_RESOURCE_ATTRIBUTES
            value: service.name=$(OTEL_SERVICE_NAME),service.namespace=opentelemetry-demo,service.version=1.11.1
          resources:
            limits:
              memory: 20Mi
          securityContext:
            runAsGroup: 1000
            runAsNonRoot: true
            runAsUser: 999
          volumeMounts:
      volumes:
---
# Source: opentelemetry-demo/charts/opensearch/templates/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: otel-demo-opensearch
  labels:
    helm.sh/chart: opensearch-2.21.0
    app.kubernetes.io/name: opensearch
    app.kubernetes.io/instance: scale-otel-demo
    app.kubernetes.io/version: "2.15.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: otel-demo-opensearch
  annotations:
    majorVersion: "2"
spec:
  serviceName: otel-demo-opensearch-headless
  selector:
    matchLabels:
      app.kubernetes.io/name: opensearch
      app.kubernetes.io/instance: scale-otel-demo
  replicas: 1
  podManagementPolicy: Parallel
  updateStrategy:
    type: RollingUpdate
  template:
    metadata:
      name: "otel-demo-opensearch"
      labels:
        helm.sh/chart: opensearch-2.21.0
        app.kubernetes.io/name: opensearch
        app.kubernetes.io/instance: scale-otel-demo
        app.kubernetes.io/version: "2.15.0"
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/component: otel-demo-opensearch
      annotations:
        configchecksum: dfc9a7c353ec9923fa3d2f5bf99c59f155e43cbd287277da13e3ffe1dcb1405
    spec:
      securityContext:
        fsGroup: 1000
        runAsUser: 1000
      automountServiceAccountToken: false
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 1
            podAffinityTerm:
              topologyKey: kubernetes.io/hostname
              labelSelector:
                matchExpressions:
                - key: app.kubernetes.io/instance
                  operator: In
                  values:
                  - scale-otel-demo
                - key: app.kubernetes.io/name
                  operator: In
                  values:
                  - opensearch
      terminationGracePeriodSeconds: 120
      volumes:
      - name: config
        configMap:
          name: otel-demo-opensearch-config
      - emptyDir: {}
        name: config-emptydir
      enableServiceLinks: true
      initContainers:
      - name: configfile
        image: "opensearchproject/opensearch:2.15.0"
        imagePullPolicy: "IfNotPresent"
        command:
        - sh
        - -c
        - |
          #!/usr/bin/env bash
          cp -r /tmp/configfolder/*  /tmp/config/
        resources:
          {}
        volumeMounts:
          - mountPath: /tmp/config/
            name: config-emptydir
          - name: config
            mountPath: /tmp/configfolder/opensearch.yml
            subPath: opensearch.yml
      containers:
      - name: "opensearch"
        securityContext:
          capabilities:
            drop:
            - ALL
          runAsNonRoot: true
          runAsUser: 1000

        image: "opensearchproject/opensearch:2.15.0"
        imagePullPolicy: "IfNotPresent"
        readinessProbe:
          failureThreshold: 3
          periodSeconds: 5
          tcpSocket:
            port: 9200
          timeoutSeconds: 3
        startupProbe:
          failureThreshold: 30
          initialDelaySeconds: 5
          periodSeconds: 10
          tcpSocket:
            port: 9200
          timeoutSeconds: 3
        ports:
        - name: http
          containerPort: 9200
        - name: transport
          containerPort: 9300
        - name: metrics
          containerPort: 9600
        resources:
          limits:
            memory: 1Gi
          requests:
            cpu: 1000m
            memory: 100Mi
        env:
        - name: node.name
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: discovery.seed_hosts
          value: "opensearch-cluster-master-headless"
        - name: cluster.name
          value: "demo-cluster"
        - name: network.host
          value: "0.0.0.0"
        - name: OPENSEARCH_JAVA_OPTS
          value: "-Xms300m -Xmx300m"
        - name: node.roles
          value: "master,ingest,data,remote_cluster_client,"
        - name: discovery.type
          value: "single-node"
        - name: bootstrap.memory_lock
          value: "true"
        - name: DISABLE_INSTALL_DEMO_CONFIG
          value: "true"
        - name: DISABLE_SECURITY_PLUGIN
          value: "true"
        volumeMounts:
        - name: config-emptydir
          mountPath: /usr/share/opensearch/config/opensearch.yml
          subPath: opensearch.yml